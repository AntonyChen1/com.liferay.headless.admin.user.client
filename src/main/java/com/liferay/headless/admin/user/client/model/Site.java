/*
 * Headless Admin User
 * A Java client JAR is available for use with the group ID 'com.liferay', artifact ID 'com.liferay.headless.admin.user.client', and version '4.0.49'.
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.liferay.headless.admin.user.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.liferay.headless.admin.user.client.model.Creator;
import com.liferay.headless.admin.user.client.model.Site;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Site
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-04T10:04:24.474623+08:00[Asia/Shanghai]")

public class Site {
  @SerializedName("availableLanguages")
  private List<String> availableLanguages = null;

  @SerializedName("creator")
  private Creator creator = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("description_i18n")
  private Map<String, String> descriptionI18n = null;

  @SerializedName("descriptiveName")
  private String descriptiveName = null;

  @SerializedName("descriptiveName_i18n")
  private Map<String, String> descriptiveNameI18n = null;

  @SerializedName("friendlyUrlPath")
  private String friendlyUrlPath = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("key")
  private String key = null;

  @SerializedName("membershipType")
  private String membershipType = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("name_i18n")
  private Map<String, String> nameI18n = null;

  @SerializedName("parentSiteId")
  private Long parentSiteId = null;

  @SerializedName("sites")
  private List<Site> sites = null;

  @SerializedName("x-class-name")
  private String xClassName = "com.liferay.headless.admin.user.dto.v1_0.Site";

  public Site availableLanguages(List<String> availableLanguages) {
    this.availableLanguages = availableLanguages;
    return this;
  }

  public Site addAvailableLanguagesItem(String availableLanguagesItem) {
    if (this.availableLanguages == null) {
      this.availableLanguages = new ArrayList<String>();
    }
    this.availableLanguages.add(availableLanguagesItem);
    return this;
  }

   /**
   * Get availableLanguages
   * @return availableLanguages
  **/
  @Schema(description = "")
  public List<String> getAvailableLanguages() {
    return availableLanguages;
  }

  public void setAvailableLanguages(List<String> availableLanguages) {
    this.availableLanguages = availableLanguages;
  }

  public Site creator(Creator creator) {
    this.creator = creator;
    return this;
  }

   /**
   * Get creator
   * @return creator
  **/
  @Schema(description = "")
  public Creator getCreator() {
    return creator;
  }

  public void setCreator(Creator creator) {
    this.creator = creator;
  }

  public Site description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Site descriptionI18n(Map<String, String> descriptionI18n) {
    this.descriptionI18n = descriptionI18n;
    return this;
  }

  public Site putDescriptionI18nItem(String key, String descriptionI18nItem) {
    if (this.descriptionI18n == null) {
      this.descriptionI18n = new HashMap<String, String>();
    }
    this.descriptionI18n.put(key, descriptionI18nItem);
    return this;
  }

   /**
   * Get descriptionI18n
   * @return descriptionI18n
  **/
  @Schema(description = "")
  public Map<String, String> getDescriptionI18n() {
    return descriptionI18n;
  }

  public void setDescriptionI18n(Map<String, String> descriptionI18n) {
    this.descriptionI18n = descriptionI18n;
  }

  public Site descriptiveName(String descriptiveName) {
    this.descriptiveName = descriptiveName;
    return this;
  }

   /**
   * Get descriptiveName
   * @return descriptiveName
  **/
  @Schema(description = "")
  public String getDescriptiveName() {
    return descriptiveName;
  }

  public void setDescriptiveName(String descriptiveName) {
    this.descriptiveName = descriptiveName;
  }

  public Site descriptiveNameI18n(Map<String, String> descriptiveNameI18n) {
    this.descriptiveNameI18n = descriptiveNameI18n;
    return this;
  }

  public Site putDescriptiveNameI18nItem(String key, String descriptiveNameI18nItem) {
    if (this.descriptiveNameI18n == null) {
      this.descriptiveNameI18n = new HashMap<String, String>();
    }
    this.descriptiveNameI18n.put(key, descriptiveNameI18nItem);
    return this;
  }

   /**
   * Get descriptiveNameI18n
   * @return descriptiveNameI18n
  **/
  @Schema(description = "")
  public Map<String, String> getDescriptiveNameI18n() {
    return descriptiveNameI18n;
  }

  public void setDescriptiveNameI18n(Map<String, String> descriptiveNameI18n) {
    this.descriptiveNameI18n = descriptiveNameI18n;
  }

  public Site friendlyUrlPath(String friendlyUrlPath) {
    this.friendlyUrlPath = friendlyUrlPath;
    return this;
  }

   /**
   * Get friendlyUrlPath
   * @return friendlyUrlPath
  **/
  @Schema(description = "")
  public String getFriendlyUrlPath() {
    return friendlyUrlPath;
  }

  public void setFriendlyUrlPath(String friendlyUrlPath) {
    this.friendlyUrlPath = friendlyUrlPath;
  }

  public Site id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Site key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @Schema(description = "")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public Site membershipType(String membershipType) {
    this.membershipType = membershipType;
    return this;
  }

   /**
   * Get membershipType
   * @return membershipType
  **/
  @Schema(description = "")
  public String getMembershipType() {
    return membershipType;
  }

  public void setMembershipType(String membershipType) {
    this.membershipType = membershipType;
  }

  public Site name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Site nameI18n(Map<String, String> nameI18n) {
    this.nameI18n = nameI18n;
    return this;
  }

  public Site putNameI18nItem(String key, String nameI18nItem) {
    if (this.nameI18n == null) {
      this.nameI18n = new HashMap<String, String>();
    }
    this.nameI18n.put(key, nameI18nItem);
    return this;
  }

   /**
   * Get nameI18n
   * @return nameI18n
  **/
  @Schema(description = "")
  public Map<String, String> getNameI18n() {
    return nameI18n;
  }

  public void setNameI18n(Map<String, String> nameI18n) {
    this.nameI18n = nameI18n;
  }

  public Site parentSiteId(Long parentSiteId) {
    this.parentSiteId = parentSiteId;
    return this;
  }

   /**
   * Get parentSiteId
   * @return parentSiteId
  **/
  @Schema(description = "")
  public Long getParentSiteId() {
    return parentSiteId;
  }

  public void setParentSiteId(Long parentSiteId) {
    this.parentSiteId = parentSiteId;
  }

  public Site sites(List<Site> sites) {
    this.sites = sites;
    return this;
  }

  public Site addSitesItem(Site sitesItem) {
    if (this.sites == null) {
      this.sites = new ArrayList<Site>();
    }
    this.sites.add(sitesItem);
    return this;
  }

   /**
   * Get sites
   * @return sites
  **/
  @Schema(description = "")
  public List<Site> getSites() {
    return sites;
  }

  public void setSites(List<Site> sites) {
    this.sites = sites;
  }

   /**
   * Get xClassName
   * @return xClassName
  **/
  @Schema(description = "")
  public String getXClassName() {
    return xClassName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Site site = (Site) o;
    return Objects.equals(this.availableLanguages, site.availableLanguages) &&
        Objects.equals(this.creator, site.creator) &&
        Objects.equals(this.description, site.description) &&
        Objects.equals(this.descriptionI18n, site.descriptionI18n) &&
        Objects.equals(this.descriptiveName, site.descriptiveName) &&
        Objects.equals(this.descriptiveNameI18n, site.descriptiveNameI18n) &&
        Objects.equals(this.friendlyUrlPath, site.friendlyUrlPath) &&
        Objects.equals(this.id, site.id) &&
        Objects.equals(this.key, site.key) &&
        Objects.equals(this.membershipType, site.membershipType) &&
        Objects.equals(this.name, site.name) &&
        Objects.equals(this.nameI18n, site.nameI18n) &&
        Objects.equals(this.parentSiteId, site.parentSiteId) &&
        Objects.equals(this.sites, site.sites) &&
        Objects.equals(this.xClassName, site.xClassName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableLanguages, creator, description, descriptionI18n, descriptiveName, descriptiveNameI18n, friendlyUrlPath, id, key, membershipType, name, nameI18n, parentSiteId, sites, xClassName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Site {\n");
    
    sb.append("    availableLanguages: ").append(toIndentedString(availableLanguages)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionI18n: ").append(toIndentedString(descriptionI18n)).append("\n");
    sb.append("    descriptiveName: ").append(toIndentedString(descriptiveName)).append("\n");
    sb.append("    descriptiveNameI18n: ").append(toIndentedString(descriptiveNameI18n)).append("\n");
    sb.append("    friendlyUrlPath: ").append(toIndentedString(friendlyUrlPath)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    membershipType: ").append(toIndentedString(membershipType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameI18n: ").append(toIndentedString(nameI18n)).append("\n");
    sb.append("    parentSiteId: ").append(toIndentedString(parentSiteId)).append("\n");
    sb.append("    sites: ").append(toIndentedString(sites)).append("\n");
    sb.append("    xClassName: ").append(toIndentedString(xClassName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
