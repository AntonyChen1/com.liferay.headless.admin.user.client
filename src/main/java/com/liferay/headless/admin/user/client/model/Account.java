/*
 * Headless Admin User
 * A Java client JAR is available for use with the group ID 'com.liferay', artifact ID 'com.liferay.headless.admin.user.client', and version '4.0.49'.
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.liferay.headless.admin.user.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.liferay.headless.admin.user.client.model.CustomField;
import com.liferay.headless.admin.user.client.model.PostalAddress;
import com.liferay.headless.admin.user.client.model.UserAccount;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
/**
 * An account represents an external account, for example a customer business.
 */
@Schema(description = "An account represents an external account, for example a customer business.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-04T10:04:24.474623+08:00[Asia/Shanghai]")

public class Account {
  @SerializedName("accountUserAccounts")
  private List<UserAccount> accountUserAccounts = null;

  @SerializedName("actions")
  private Map<String, Map<String, String>> actions = null;

  @SerializedName("customFields")
  private List<CustomField> customFields = null;

  @SerializedName("dateCreated")
  private OffsetDateTime dateCreated = null;

  @SerializedName("dateModified")
  private OffsetDateTime dateModified = null;

  @SerializedName("defaultBillingAddressId")
  private Long defaultBillingAddressId = null;

  @SerializedName("defaultShippingAddressId")
  private Long defaultShippingAddressId = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("domains")
  private List<String> domains = null;

  @SerializedName("externalReferenceCode")
  private String externalReferenceCode = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("logoId")
  private Long logoId = null;

  @SerializedName("logoURL")
  private String logoURL = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("numberOfUsers")
  private Integer numberOfUsers = null;

  @SerializedName("organizationIds")
  private List<Long> organizationIds = null;

  @SerializedName("parentAccountId")
  private Long parentAccountId = null;

  @SerializedName("postalAddresses")
  private List<PostalAddress> postalAddresses = null;

  @SerializedName("status")
  private Integer status = null;

  @SerializedName("taxId")
  private String taxId = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("business")
    BUSINESS("business"),
    @SerializedName("guest")
    GUEST("guest"),
    @SerializedName("person")
    PERSON("person"),
    @SerializedName("supplier")
    SUPPLIER("supplier");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("x-class-name")
  private String xClassName = "com.liferay.headless.admin.user.dto.v1_0.Account";

  public Account accountUserAccounts(List<UserAccount> accountUserAccounts) {
    this.accountUserAccounts = accountUserAccounts;
    return this;
  }

  public Account addAccountUserAccountsItem(UserAccount accountUserAccountsItem) {
    if (this.accountUserAccounts == null) {
      this.accountUserAccounts = new ArrayList<UserAccount>();
    }
    this.accountUserAccounts.add(accountUserAccountsItem);
    return this;
  }

   /**
   * The users linked to the account
   * @return accountUserAccounts
  **/
  @Schema(description = "The users linked to the account")
  public List<UserAccount> getAccountUserAccounts() {
    return accountUserAccounts;
  }

  public void setAccountUserAccounts(List<UserAccount> accountUserAccounts) {
    this.accountUserAccounts = accountUserAccounts;
  }

   /**
   * Block of actions allowed by the user making the request.
   * @return actions
  **/
  @Schema(description = "Block of actions allowed by the user making the request.")
  public Map<String, Map<String, String>> getActions() {
    return actions;
  }

  public Account customFields(List<CustomField> customFields) {
    this.customFields = customFields;
    return this;
  }

  public Account addCustomFieldsItem(CustomField customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<CustomField>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @Schema(description = "")
  public List<CustomField> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(List<CustomField> customFields) {
    this.customFields = customFields;
  }

   /**
   * The account&#x27;s creation date.
   * @return dateCreated
  **/
  @Schema(description = "The account's creation date.")
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

   /**
   * The account&#x27;s most recent modification date.
   * @return dateModified
  **/
  @Schema(description = "The account's most recent modification date.")
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public Account defaultBillingAddressId(Long defaultBillingAddressId) {
    this.defaultBillingAddressId = defaultBillingAddressId;
    return this;
  }

   /**
   * Get defaultBillingAddressId
   * @return defaultBillingAddressId
  **/
  @Schema(description = "")
  public Long getDefaultBillingAddressId() {
    return defaultBillingAddressId;
  }

  public void setDefaultBillingAddressId(Long defaultBillingAddressId) {
    this.defaultBillingAddressId = defaultBillingAddressId;
  }

  public Account defaultShippingAddressId(Long defaultShippingAddressId) {
    this.defaultShippingAddressId = defaultShippingAddressId;
    return this;
  }

   /**
   * Get defaultShippingAddressId
   * @return defaultShippingAddressId
  **/
  @Schema(description = "")
  public Long getDefaultShippingAddressId() {
    return defaultShippingAddressId;
  }

  public void setDefaultShippingAddressId(Long defaultShippingAddressId) {
    this.defaultShippingAddressId = defaultShippingAddressId;
  }

  public Account description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Account domains(List<String> domains) {
    this.domains = domains;
    return this;
  }

  public Account addDomainsItem(String domainsItem) {
    if (this.domains == null) {
      this.domains = new ArrayList<String>();
    }
    this.domains.add(domainsItem);
    return this;
  }

   /**
   * The account&#x27;s email domains. Users assigned to this account generally will have email addresses under one of these domains.
   * @return domains
  **/
  @Schema(description = "The account's email domains. Users assigned to this account generally will have email addresses under one of these domains.")
  public List<String> getDomains() {
    return domains;
  }

  public void setDomains(List<String> domains) {
    this.domains = domains;
  }

  public Account externalReferenceCode(String externalReferenceCode) {
    this.externalReferenceCode = externalReferenceCode;
    return this;
  }

   /**
   * The optional external key of this account.
   * @return externalReferenceCode
  **/
  @Schema(description = "The optional external key of this account.")
  public String getExternalReferenceCode() {
    return externalReferenceCode;
  }

  public void setExternalReferenceCode(String externalReferenceCode) {
    this.externalReferenceCode = externalReferenceCode;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public Account logoId(Long logoId) {
    this.logoId = logoId;
    return this;
  }

   /**
   * Get logoId
   * @return logoId
  **/
  @Schema(description = "")
  public Long getLogoId() {
    return logoId;
  }

  public void setLogoId(Long logoId) {
    this.logoId = logoId;
  }

  public Account logoURL(String logoURL) {
    this.logoURL = logoURL;
    return this;
  }

   /**
   * Get logoURL
   * @return logoURL
  **/
  @Schema(description = "")
  public String getLogoURL() {
    return logoURL;
  }

  public void setLogoURL(String logoURL) {
    this.logoURL = logoURL;
  }

  public Account name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * The number of this account&#x27;s associated users.
   * @return numberOfUsers
  **/
  @Schema(description = "The number of this account's associated users.")
  public Integer getNumberOfUsers() {
    return numberOfUsers;
  }

  public Account organizationIds(List<Long> organizationIds) {
    this.organizationIds = organizationIds;
    return this;
  }

  public Account addOrganizationIdsItem(Long organizationIdsItem) {
    if (this.organizationIds == null) {
      this.organizationIds = new ArrayList<Long>();
    }
    this.organizationIds.add(organizationIdsItem);
    return this;
  }

   /**
   * Get organizationIds
   * @return organizationIds
  **/
  @Schema(description = "")
  public List<Long> getOrganizationIds() {
    return organizationIds;
  }

  public void setOrganizationIds(List<Long> organizationIds) {
    this.organizationIds = organizationIds;
  }

  public Account parentAccountId(Long parentAccountId) {
    this.parentAccountId = parentAccountId;
    return this;
  }

   /**
   * Get parentAccountId
   * @return parentAccountId
  **/
  @Schema(description = "")
  public Long getParentAccountId() {
    return parentAccountId;
  }

  public void setParentAccountId(Long parentAccountId) {
    this.parentAccountId = parentAccountId;
  }

  public Account postalAddresses(List<PostalAddress> postalAddresses) {
    this.postalAddresses = postalAddresses;
    return this;
  }

  public Account addPostalAddressesItem(PostalAddress postalAddressesItem) {
    if (this.postalAddresses == null) {
      this.postalAddresses = new ArrayList<PostalAddress>();
    }
    this.postalAddresses.add(postalAddressesItem);
    return this;
  }

   /**
   * The addresses linked to the account
   * @return postalAddresses
  **/
  @Schema(description = "The addresses linked to the account")
  public List<PostalAddress> getPostalAddresses() {
    return postalAddresses;
  }

  public void setPostalAddresses(List<PostalAddress> postalAddresses) {
    this.postalAddresses = postalAddresses;
  }

  public Account status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  public Account taxId(String taxId) {
    this.taxId = taxId;
    return this;
  }

   /**
   * Get taxId
   * @return taxId
  **/
  @Schema(example = "Abcd1234", description = "")
  public String getTaxId() {
    return taxId;
  }

  public void setTaxId(String taxId) {
    this.taxId = taxId;
  }

  public Account type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

   /**
   * Get xClassName
   * @return xClassName
  **/
  @Schema(description = "")
  public String getXClassName() {
    return xClassName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.accountUserAccounts, account.accountUserAccounts) &&
        Objects.equals(this.actions, account.actions) &&
        Objects.equals(this.customFields, account.customFields) &&
        Objects.equals(this.dateCreated, account.dateCreated) &&
        Objects.equals(this.dateModified, account.dateModified) &&
        Objects.equals(this.defaultBillingAddressId, account.defaultBillingAddressId) &&
        Objects.equals(this.defaultShippingAddressId, account.defaultShippingAddressId) &&
        Objects.equals(this.description, account.description) &&
        Objects.equals(this.domains, account.domains) &&
        Objects.equals(this.externalReferenceCode, account.externalReferenceCode) &&
        Objects.equals(this.id, account.id) &&
        Objects.equals(this.logoId, account.logoId) &&
        Objects.equals(this.logoURL, account.logoURL) &&
        Objects.equals(this.name, account.name) &&
        Objects.equals(this.numberOfUsers, account.numberOfUsers) &&
        Objects.equals(this.organizationIds, account.organizationIds) &&
        Objects.equals(this.parentAccountId, account.parentAccountId) &&
        Objects.equals(this.postalAddresses, account.postalAddresses) &&
        Objects.equals(this.status, account.status) &&
        Objects.equals(this.taxId, account.taxId) &&
        Objects.equals(this.type, account.type) &&
        Objects.equals(this.xClassName, account.xClassName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountUserAccounts, actions, customFields, dateCreated, dateModified, defaultBillingAddressId, defaultShippingAddressId, description, domains, externalReferenceCode, id, logoId, logoURL, name, numberOfUsers, organizationIds, parentAccountId, postalAddresses, status, taxId, type, xClassName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    
    sb.append("    accountUserAccounts: ").append(toIndentedString(accountUserAccounts)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    defaultBillingAddressId: ").append(toIndentedString(defaultBillingAddressId)).append("\n");
    sb.append("    defaultShippingAddressId: ").append(toIndentedString(defaultShippingAddressId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    externalReferenceCode: ").append(toIndentedString(externalReferenceCode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logoId: ").append(toIndentedString(logoId)).append("\n");
    sb.append("    logoURL: ").append(toIndentedString(logoURL)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberOfUsers: ").append(toIndentedString(numberOfUsers)).append("\n");
    sb.append("    organizationIds: ").append(toIndentedString(organizationIds)).append("\n");
    sb.append("    parentAccountId: ").append(toIndentedString(parentAccountId)).append("\n");
    sb.append("    postalAddresses: ").append(toIndentedString(postalAddresses)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    xClassName: ").append(toIndentedString(xClassName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
