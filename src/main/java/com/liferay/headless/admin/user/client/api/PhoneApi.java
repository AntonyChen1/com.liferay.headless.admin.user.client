/*
 * Headless Admin User
 * A Java client JAR is available for use with the group ID 'com.liferay', artifact ID 'com.liferay.headless.admin.user.client', and version '4.0.49'.
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.liferay.headless.admin.user.client.api;

import com.liferay.headless.admin.user.client.ApiCallback;
import com.liferay.headless.admin.user.client.ApiClient;
import com.liferay.headless.admin.user.client.ApiException;
import com.liferay.headless.admin.user.client.ApiResponse;
import com.liferay.headless.admin.user.client.Configuration;
import com.liferay.headless.admin.user.client.Pair;
import com.liferay.headless.admin.user.client.ProgressRequestBody;
import com.liferay.headless.admin.user.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.liferay.headless.admin.user.client.model.PagePhone;
import com.liferay.headless.admin.user.client.model.Phone;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PhoneApi {
    private ApiClient apiClient;

    public PhoneApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PhoneApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getOrganizationPhonesPage
     * @param organizationId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrganizationPhonesPageCall(String organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/organizations/{organizationId}/phones"
            .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrganizationPhonesPageValidateBeforeCall(String organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationPhonesPage(Async)");
        }
        
        com.squareup.okhttp.Call call = getOrganizationPhonesPageCall(organizationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieves the organization&#x27;s phone numbers.
     * @param organizationId  (required)
     * @return PagePhone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePhone getOrganizationPhonesPage(String organizationId) throws ApiException {
        ApiResponse<PagePhone> resp = getOrganizationPhonesPageWithHttpInfo(organizationId);
        return resp.getData();
    }

    /**
     * 
     * Retrieves the organization&#x27;s phone numbers.
     * @param organizationId  (required)
     * @return ApiResponse&lt;PagePhone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePhone> getOrganizationPhonesPageWithHttpInfo(String organizationId) throws ApiException {
        com.squareup.okhttp.Call call = getOrganizationPhonesPageValidateBeforeCall(organizationId, null, null);
        Type localVarReturnType = new TypeToken<PagePhone>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the organization&#x27;s phone numbers.
     * @param organizationId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrganizationPhonesPageAsync(String organizationId, final ApiCallback<PagePhone> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrganizationPhonesPageValidateBeforeCall(organizationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePhone>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPhone
     * @param phoneId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPhoneCall(String phoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/phones/{phoneId}"
            .replaceAll("\\{" + "phoneId" + "\\}", apiClient.escapeString(phoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPhoneValidateBeforeCall(String phoneId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'phoneId' is set
        if (phoneId == null) {
            throw new ApiException("Missing the required parameter 'phoneId' when calling getPhone(Async)");
        }
        
        com.squareup.okhttp.Call call = getPhoneCall(phoneId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieves the phone number.
     * @param phoneId  (required)
     * @return Phone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Phone getPhone(String phoneId) throws ApiException {
        ApiResponse<Phone> resp = getPhoneWithHttpInfo(phoneId);
        return resp.getData();
    }

    /**
     * 
     * Retrieves the phone number.
     * @param phoneId  (required)
     * @return ApiResponse&lt;Phone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Phone> getPhoneWithHttpInfo(String phoneId) throws ApiException {
        com.squareup.okhttp.Call call = getPhoneValidateBeforeCall(phoneId, null, null);
        Type localVarReturnType = new TypeToken<Phone>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the phone number.
     * @param phoneId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPhoneAsync(String phoneId, final ApiCallback<Phone> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPhoneValidateBeforeCall(phoneId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Phone>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserAccountPhonesPage
     * @param userAccountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserAccountPhonesPageCall(String userAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/user-accounts/{userAccountId}/phones"
            .replaceAll("\\{" + "userAccountId" + "\\}", apiClient.escapeString(userAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserAccountPhonesPageValidateBeforeCall(String userAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userAccountId' is set
        if (userAccountId == null) {
            throw new ApiException("Missing the required parameter 'userAccountId' when calling getUserAccountPhonesPage(Async)");
        }
        
        com.squareup.okhttp.Call call = getUserAccountPhonesPageCall(userAccountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieves the user&#x27;s phone numbers.
     * @param userAccountId  (required)
     * @return PagePhone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePhone getUserAccountPhonesPage(String userAccountId) throws ApiException {
        ApiResponse<PagePhone> resp = getUserAccountPhonesPageWithHttpInfo(userAccountId);
        return resp.getData();
    }

    /**
     * 
     * Retrieves the user&#x27;s phone numbers.
     * @param userAccountId  (required)
     * @return ApiResponse&lt;PagePhone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePhone> getUserAccountPhonesPageWithHttpInfo(String userAccountId) throws ApiException {
        com.squareup.okhttp.Call call = getUserAccountPhonesPageValidateBeforeCall(userAccountId, null, null);
        Type localVarReturnType = new TypeToken<PagePhone>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the user&#x27;s phone numbers.
     * @param userAccountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserAccountPhonesPageAsync(String userAccountId, final ApiCallback<PagePhone> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserAccountPhonesPageValidateBeforeCall(userAccountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePhone>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postOrganizationPhonesPageExportBatch
     * @param organizationId  (required)
     * @param callbackURL  (optional)
     * @param contentType  (optional)
     * @param fieldNames  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postOrganizationPhonesPageExportBatchCall(String organizationId, String callbackURL, String contentType, String fieldNames, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/organizations/{organizationId}/phones/export-batch"
            .replaceAll("\\{" + "organizationId" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (callbackURL != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("callbackURL", callbackURL));
        if (contentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentType", contentType));
        if (fieldNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fieldNames", fieldNames));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postOrganizationPhonesPageExportBatchValidateBeforeCall(String organizationId, String callbackURL, String contentType, String fieldNames, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling postOrganizationPhonesPageExportBatch(Async)");
        }
        
        com.squareup.okhttp.Call call = postOrganizationPhonesPageExportBatchCall(organizationId, callbackURL, contentType, fieldNames, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param organizationId  (required)
     * @param callbackURL  (optional)
     * @param contentType  (optional)
     * @param fieldNames  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postOrganizationPhonesPageExportBatch(String organizationId, String callbackURL, String contentType, String fieldNames) throws ApiException {
        postOrganizationPhonesPageExportBatchWithHttpInfo(organizationId, callbackURL, contentType, fieldNames);
    }

    /**
     * 
     * 
     * @param organizationId  (required)
     * @param callbackURL  (optional)
     * @param contentType  (optional)
     * @param fieldNames  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postOrganizationPhonesPageExportBatchWithHttpInfo(String organizationId, String callbackURL, String contentType, String fieldNames) throws ApiException {
        com.squareup.okhttp.Call call = postOrganizationPhonesPageExportBatchValidateBeforeCall(organizationId, callbackURL, contentType, fieldNames, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param organizationId  (required)
     * @param callbackURL  (optional)
     * @param contentType  (optional)
     * @param fieldNames  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postOrganizationPhonesPageExportBatchAsync(String organizationId, String callbackURL, String contentType, String fieldNames, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postOrganizationPhonesPageExportBatchValidateBeforeCall(organizationId, callbackURL, contentType, fieldNames, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postUserAccountPhonesPageExportBatch
     * @param userAccountId  (required)
     * @param callbackURL  (optional)
     * @param contentType  (optional)
     * @param fieldNames  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postUserAccountPhonesPageExportBatchCall(String userAccountId, String callbackURL, String contentType, String fieldNames, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/user-accounts/{userAccountId}/phones/export-batch"
            .replaceAll("\\{" + "userAccountId" + "\\}", apiClient.escapeString(userAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (callbackURL != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("callbackURL", callbackURL));
        if (contentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentType", contentType));
        if (fieldNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fieldNames", fieldNames));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postUserAccountPhonesPageExportBatchValidateBeforeCall(String userAccountId, String callbackURL, String contentType, String fieldNames, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userAccountId' is set
        if (userAccountId == null) {
            throw new ApiException("Missing the required parameter 'userAccountId' when calling postUserAccountPhonesPageExportBatch(Async)");
        }
        
        com.squareup.okhttp.Call call = postUserAccountPhonesPageExportBatchCall(userAccountId, callbackURL, contentType, fieldNames, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param userAccountId  (required)
     * @param callbackURL  (optional)
     * @param contentType  (optional)
     * @param fieldNames  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postUserAccountPhonesPageExportBatch(String userAccountId, String callbackURL, String contentType, String fieldNames) throws ApiException {
        postUserAccountPhonesPageExportBatchWithHttpInfo(userAccountId, callbackURL, contentType, fieldNames);
    }

    /**
     * 
     * 
     * @param userAccountId  (required)
     * @param callbackURL  (optional)
     * @param contentType  (optional)
     * @param fieldNames  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postUserAccountPhonesPageExportBatchWithHttpInfo(String userAccountId, String callbackURL, String contentType, String fieldNames) throws ApiException {
        com.squareup.okhttp.Call call = postUserAccountPhonesPageExportBatchValidateBeforeCall(userAccountId, callbackURL, contentType, fieldNames, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param userAccountId  (required)
     * @param callbackURL  (optional)
     * @param contentType  (optional)
     * @param fieldNames  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postUserAccountPhonesPageExportBatchAsync(String userAccountId, String callbackURL, String contentType, String fieldNames, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postUserAccountPhonesPageExportBatchValidateBeforeCall(userAccountId, callbackURL, contentType, fieldNames, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
