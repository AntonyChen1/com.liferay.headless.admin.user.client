/*
 * Headless Admin User
 * A Java client JAR is available for use with the group ID 'com.liferay', artifact ID 'com.liferay.headless.admin.user.client', and version '4.0.49'.
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.liferay.headless.admin.user.client.api;

import com.liferay.headless.admin.user.client.ApiCallback;
import com.liferay.headless.admin.user.client.ApiClient;
import com.liferay.headless.admin.user.client.ApiException;
import com.liferay.headless.admin.user.client.ApiResponse;
import com.liferay.headless.admin.user.client.Configuration;
import com.liferay.headless.admin.user.client.Pair;
import com.liferay.headless.admin.user.client.ProgressRequestBody;
import com.liferay.headless.admin.user.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.liferay.headless.admin.user.client.model.AccountRole;
import com.liferay.headless.admin.user.client.model.PageAccountRole;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountRoleApi {
    private ApiClient apiClient;

    public AccountRoleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountRoleApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteAccountAccountRoleUserAccountAssociation
     * @param accountId  (required)
     * @param accountRoleId  (required)
     * @param userAccountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccountAccountRoleUserAccountAssociationCall(String accountId, String accountRoleId, String userAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/accounts/{accountId}/account-roles/{accountRoleId}/user-accounts/{userAccountId}"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "accountRoleId" + "\\}", apiClient.escapeString(accountRoleId.toString()))
            .replaceAll("\\{" + "userAccountId" + "\\}", apiClient.escapeString(userAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountAccountRoleUserAccountAssociationValidateBeforeCall(String accountId, String accountRoleId, String userAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccountAccountRoleUserAccountAssociation(Async)");
        }
        // verify the required parameter 'accountRoleId' is set
        if (accountRoleId == null) {
            throw new ApiException("Missing the required parameter 'accountRoleId' when calling deleteAccountAccountRoleUserAccountAssociation(Async)");
        }
        // verify the required parameter 'userAccountId' is set
        if (userAccountId == null) {
            throw new ApiException("Missing the required parameter 'userAccountId' when calling deleteAccountAccountRoleUserAccountAssociation(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAccountAccountRoleUserAccountAssociationCall(accountId, accountRoleId, userAccountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Unassigns account users to the account role
     * @param accountId  (required)
     * @param accountRoleId  (required)
     * @param userAccountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAccountAccountRoleUserAccountAssociation(String accountId, String accountRoleId, String userAccountId) throws ApiException {
        deleteAccountAccountRoleUserAccountAssociationWithHttpInfo(accountId, accountRoleId, userAccountId);
    }

    /**
     * 
     * Unassigns account users to the account role
     * @param accountId  (required)
     * @param accountRoleId  (required)
     * @param userAccountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAccountAccountRoleUserAccountAssociationWithHttpInfo(String accountId, String accountRoleId, String userAccountId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountAccountRoleUserAccountAssociationValidateBeforeCall(accountId, accountRoleId, userAccountId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Unassigns account users to the account role
     * @param accountId  (required)
     * @param accountRoleId  (required)
     * @param userAccountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccountAccountRoleUserAccountAssociationAsync(String accountId, String accountRoleId, String userAccountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountAccountRoleUserAccountAssociationValidateBeforeCall(accountId, accountRoleId, userAccountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddress
     * @param externalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param emailAddress  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressCall(String externalReferenceCode, String accountRoleId, String emailAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/accounts/by-external-reference-code/{externalReferenceCode}/account-roles/{accountRoleId}/user-accounts/by-email-address/{emailAddress}"
            .replaceAll("\\{" + "externalReferenceCode" + "\\}", apiClient.escapeString(externalReferenceCode.toString()))
            .replaceAll("\\{" + "accountRoleId" + "\\}", apiClient.escapeString(accountRoleId.toString()))
            .replaceAll("\\{" + "emailAddress" + "\\}", apiClient.escapeString(emailAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressValidateBeforeCall(String externalReferenceCode, String accountRoleId, String emailAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'externalReferenceCode' is set
        if (externalReferenceCode == null) {
            throw new ApiException("Missing the required parameter 'externalReferenceCode' when calling deleteAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddress(Async)");
        }
        // verify the required parameter 'accountRoleId' is set
        if (accountRoleId == null) {
            throw new ApiException("Missing the required parameter 'accountRoleId' when calling deleteAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddress(Async)");
        }
        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException("Missing the required parameter 'emailAddress' when calling deleteAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddress(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressCall(externalReferenceCode, accountRoleId, emailAddress, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Unassigns account users by email address from the account role
     * @param externalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param emailAddress  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddress(String externalReferenceCode, String accountRoleId, String emailAddress) throws ApiException {
        deleteAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressWithHttpInfo(externalReferenceCode, accountRoleId, emailAddress);
    }

    /**
     * 
     * Unassigns account users by email address from the account role
     * @param externalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param emailAddress  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressWithHttpInfo(String externalReferenceCode, String accountRoleId, String emailAddress) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressValidateBeforeCall(externalReferenceCode, accountRoleId, emailAddress, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Unassigns account users by email address from the account role
     * @param externalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param emailAddress  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressAsync(String externalReferenceCode, String accountRoleId, String emailAddress, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressValidateBeforeCall(externalReferenceCode, accountRoleId, emailAddress, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCode
     * @param accountExternalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param externalReferenceCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeCall(String accountExternalReferenceCode, String accountRoleId, String externalReferenceCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/accounts/by-external-reference-code/{accountExternalReferenceCode}/account-roles/{accountRoleId}/user-accounts/by-external-reference-code/{externalReferenceCode}"
            .replaceAll("\\{" + "accountExternalReferenceCode" + "\\}", apiClient.escapeString(accountExternalReferenceCode.toString()))
            .replaceAll("\\{" + "accountRoleId" + "\\}", apiClient.escapeString(accountRoleId.toString()))
            .replaceAll("\\{" + "externalReferenceCode" + "\\}", apiClient.escapeString(externalReferenceCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeValidateBeforeCall(String accountExternalReferenceCode, String accountRoleId, String externalReferenceCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountExternalReferenceCode' is set
        if (accountExternalReferenceCode == null) {
            throw new ApiException("Missing the required parameter 'accountExternalReferenceCode' when calling deleteAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCode(Async)");
        }
        // verify the required parameter 'accountRoleId' is set
        if (accountRoleId == null) {
            throw new ApiException("Missing the required parameter 'accountRoleId' when calling deleteAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCode(Async)");
        }
        // verify the required parameter 'externalReferenceCode' is set
        if (externalReferenceCode == null) {
            throw new ApiException("Missing the required parameter 'externalReferenceCode' when calling deleteAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCode(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeCall(accountExternalReferenceCode, accountRoleId, externalReferenceCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Unassigns account users by external reference code from the account role
     * @param accountExternalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param externalReferenceCode  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCode(String accountExternalReferenceCode, String accountRoleId, String externalReferenceCode) throws ApiException {
        deleteAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeWithHttpInfo(accountExternalReferenceCode, accountRoleId, externalReferenceCode);
    }

    /**
     * 
     * Unassigns account users by external reference code from the account role
     * @param accountExternalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param externalReferenceCode  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeWithHttpInfo(String accountExternalReferenceCode, String accountRoleId, String externalReferenceCode) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeValidateBeforeCall(accountExternalReferenceCode, accountRoleId, externalReferenceCode, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Unassigns account users by external reference code from the account role
     * @param accountExternalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param externalReferenceCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeAsync(String accountExternalReferenceCode, String accountRoleId, String externalReferenceCode, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeValidateBeforeCall(accountExternalReferenceCode, accountRoleId, externalReferenceCode, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAccountAccountRolesByExternalReferenceCodePage
     * @param externalReferenceCode  (required)
     * @param keywords  (optional)
     * @param filter  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountAccountRolesByExternalReferenceCodePageCall(String externalReferenceCode, String keywords, String filter, String page, String pageSize, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/accounts/by-external-reference-code/{externalReferenceCode}/account-roles"
            .replaceAll("\\{" + "externalReferenceCode" + "\\}", apiClient.escapeString(externalReferenceCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keywords != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keywords", keywords));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountAccountRolesByExternalReferenceCodePageValidateBeforeCall(String externalReferenceCode, String keywords, String filter, String page, String pageSize, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'externalReferenceCode' is set
        if (externalReferenceCode == null) {
            throw new ApiException("Missing the required parameter 'externalReferenceCode' when calling getAccountAccountRolesByExternalReferenceCodePage(Async)");
        }
        
        com.squareup.okhttp.Call call = getAccountAccountRolesByExternalReferenceCodePageCall(externalReferenceCode, keywords, filter, page, pageSize, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Gets the account&#x27;s roles
     * @param externalReferenceCode  (required)
     * @param keywords  (optional)
     * @param filter  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @return PageAccountRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAccountRole getAccountAccountRolesByExternalReferenceCodePage(String externalReferenceCode, String keywords, String filter, String page, String pageSize, String sort) throws ApiException {
        ApiResponse<PageAccountRole> resp = getAccountAccountRolesByExternalReferenceCodePageWithHttpInfo(externalReferenceCode, keywords, filter, page, pageSize, sort);
        return resp.getData();
    }

    /**
     * 
     * Gets the account&#x27;s roles
     * @param externalReferenceCode  (required)
     * @param keywords  (optional)
     * @param filter  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @return ApiResponse&lt;PageAccountRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAccountRole> getAccountAccountRolesByExternalReferenceCodePageWithHttpInfo(String externalReferenceCode, String keywords, String filter, String page, String pageSize, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getAccountAccountRolesByExternalReferenceCodePageValidateBeforeCall(externalReferenceCode, keywords, filter, page, pageSize, sort, null, null);
        Type localVarReturnType = new TypeToken<PageAccountRole>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the account&#x27;s roles
     * @param externalReferenceCode  (required)
     * @param keywords  (optional)
     * @param filter  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountAccountRolesByExternalReferenceCodePageAsync(String externalReferenceCode, String keywords, String filter, String page, String pageSize, String sort, final ApiCallback<PageAccountRole> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountAccountRolesByExternalReferenceCodePageValidateBeforeCall(externalReferenceCode, keywords, filter, page, pageSize, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAccountRole>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountAccountRolesPage
     * @param accountId  (required)
     * @param keywords  (optional)
     * @param filter  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountAccountRolesPageCall(String accountId, String keywords, String filter, String page, String pageSize, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/accounts/{accountId}/account-roles"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keywords != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keywords", keywords));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountAccountRolesPageValidateBeforeCall(String accountId, String keywords, String filter, String page, String pageSize, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountAccountRolesPage(Async)");
        }
        
        com.squareup.okhttp.Call call = getAccountAccountRolesPageCall(accountId, keywords, filter, page, pageSize, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Gets the account&#x27;s roles
     * @param accountId  (required)
     * @param keywords  (optional)
     * @param filter  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @return PageAccountRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAccountRole getAccountAccountRolesPage(String accountId, String keywords, String filter, String page, String pageSize, String sort) throws ApiException {
        ApiResponse<PageAccountRole> resp = getAccountAccountRolesPageWithHttpInfo(accountId, keywords, filter, page, pageSize, sort);
        return resp.getData();
    }

    /**
     * 
     * Gets the account&#x27;s roles
     * @param accountId  (required)
     * @param keywords  (optional)
     * @param filter  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @return ApiResponse&lt;PageAccountRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAccountRole> getAccountAccountRolesPageWithHttpInfo(String accountId, String keywords, String filter, String page, String pageSize, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getAccountAccountRolesPageValidateBeforeCall(accountId, keywords, filter, page, pageSize, sort, null, null);
        Type localVarReturnType = new TypeToken<PageAccountRole>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the account&#x27;s roles
     * @param accountId  (required)
     * @param keywords  (optional)
     * @param filter  (optional)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param sort  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountAccountRolesPageAsync(String accountId, String keywords, String filter, String page, String pageSize, String sort, final ApiCallback<PageAccountRole> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountAccountRolesPageValidateBeforeCall(accountId, keywords, filter, page, pageSize, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAccountRole>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountByExternalReferenceCodeUserAccountByEmailAddressAccountRolesPage
     * @param externalReferenceCode  (required)
     * @param emailAddress  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountByExternalReferenceCodeUserAccountByEmailAddressAccountRolesPageCall(String externalReferenceCode, String emailAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/accounts/by-external-reference-code/{externalReferenceCode}/user-accounts/by-email-address/{emailAddress}/account-roles"
            .replaceAll("\\{" + "externalReferenceCode" + "\\}", apiClient.escapeString(externalReferenceCode.toString()))
            .replaceAll("\\{" + "emailAddress" + "\\}", apiClient.escapeString(emailAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountByExternalReferenceCodeUserAccountByEmailAddressAccountRolesPageValidateBeforeCall(String externalReferenceCode, String emailAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'externalReferenceCode' is set
        if (externalReferenceCode == null) {
            throw new ApiException("Missing the required parameter 'externalReferenceCode' when calling getAccountByExternalReferenceCodeUserAccountByEmailAddressAccountRolesPage(Async)");
        }
        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException("Missing the required parameter 'emailAddress' when calling getAccountByExternalReferenceCodeUserAccountByEmailAddressAccountRolesPage(Async)");
        }
        
        com.squareup.okhttp.Call call = getAccountByExternalReferenceCodeUserAccountByEmailAddressAccountRolesPageCall(externalReferenceCode, emailAddress, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Gets a user&#x27;s account roles by their email address from an account by external reference code
     * @param externalReferenceCode  (required)
     * @param emailAddress  (required)
     * @return PageAccountRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAccountRole getAccountByExternalReferenceCodeUserAccountByEmailAddressAccountRolesPage(String externalReferenceCode, String emailAddress) throws ApiException {
        ApiResponse<PageAccountRole> resp = getAccountByExternalReferenceCodeUserAccountByEmailAddressAccountRolesPageWithHttpInfo(externalReferenceCode, emailAddress);
        return resp.getData();
    }

    /**
     * 
     * Gets a user&#x27;s account roles by their email address from an account by external reference code
     * @param externalReferenceCode  (required)
     * @param emailAddress  (required)
     * @return ApiResponse&lt;PageAccountRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAccountRole> getAccountByExternalReferenceCodeUserAccountByEmailAddressAccountRolesPageWithHttpInfo(String externalReferenceCode, String emailAddress) throws ApiException {
        com.squareup.okhttp.Call call = getAccountByExternalReferenceCodeUserAccountByEmailAddressAccountRolesPageValidateBeforeCall(externalReferenceCode, emailAddress, null, null);
        Type localVarReturnType = new TypeToken<PageAccountRole>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a user&#x27;s account roles by their email address from an account by external reference code
     * @param externalReferenceCode  (required)
     * @param emailAddress  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountByExternalReferenceCodeUserAccountByEmailAddressAccountRolesPageAsync(String externalReferenceCode, String emailAddress, final ApiCallback<PageAccountRole> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountByExternalReferenceCodeUserAccountByEmailAddressAccountRolesPageValidateBeforeCall(externalReferenceCode, emailAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAccountRole>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountByExternalReferenceCodeUserAccountByExternalReferenceCodeAccountRolesPage
     * @param accountExternalReferenceCode  (required)
     * @param externalReferenceCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountByExternalReferenceCodeUserAccountByExternalReferenceCodeAccountRolesPageCall(String accountExternalReferenceCode, String externalReferenceCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/accounts/by-external-reference-code/{accountExternalReferenceCode}/user-accounts/by-external-reference-code/{externalReferenceCode}/account-roles"
            .replaceAll("\\{" + "accountExternalReferenceCode" + "\\}", apiClient.escapeString(accountExternalReferenceCode.toString()))
            .replaceAll("\\{" + "externalReferenceCode" + "\\}", apiClient.escapeString(externalReferenceCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountByExternalReferenceCodeUserAccountByExternalReferenceCodeAccountRolesPageValidateBeforeCall(String accountExternalReferenceCode, String externalReferenceCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountExternalReferenceCode' is set
        if (accountExternalReferenceCode == null) {
            throw new ApiException("Missing the required parameter 'accountExternalReferenceCode' when calling getAccountByExternalReferenceCodeUserAccountByExternalReferenceCodeAccountRolesPage(Async)");
        }
        // verify the required parameter 'externalReferenceCode' is set
        if (externalReferenceCode == null) {
            throw new ApiException("Missing the required parameter 'externalReferenceCode' when calling getAccountByExternalReferenceCodeUserAccountByExternalReferenceCodeAccountRolesPage(Async)");
        }
        
        com.squareup.okhttp.Call call = getAccountByExternalReferenceCodeUserAccountByExternalReferenceCodeAccountRolesPageCall(accountExternalReferenceCode, externalReferenceCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Gets a user&#x27;s account roles by their external reference code from an account by external reference code
     * @param accountExternalReferenceCode  (required)
     * @param externalReferenceCode  (required)
     * @return PageAccountRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAccountRole getAccountByExternalReferenceCodeUserAccountByExternalReferenceCodeAccountRolesPage(String accountExternalReferenceCode, String externalReferenceCode) throws ApiException {
        ApiResponse<PageAccountRole> resp = getAccountByExternalReferenceCodeUserAccountByExternalReferenceCodeAccountRolesPageWithHttpInfo(accountExternalReferenceCode, externalReferenceCode);
        return resp.getData();
    }

    /**
     * 
     * Gets a user&#x27;s account roles by their external reference code from an account by external reference code
     * @param accountExternalReferenceCode  (required)
     * @param externalReferenceCode  (required)
     * @return ApiResponse&lt;PageAccountRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAccountRole> getAccountByExternalReferenceCodeUserAccountByExternalReferenceCodeAccountRolesPageWithHttpInfo(String accountExternalReferenceCode, String externalReferenceCode) throws ApiException {
        com.squareup.okhttp.Call call = getAccountByExternalReferenceCodeUserAccountByExternalReferenceCodeAccountRolesPageValidateBeforeCall(accountExternalReferenceCode, externalReferenceCode, null, null);
        Type localVarReturnType = new TypeToken<PageAccountRole>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a user&#x27;s account roles by their external reference code from an account by external reference code
     * @param accountExternalReferenceCode  (required)
     * @param externalReferenceCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountByExternalReferenceCodeUserAccountByExternalReferenceCodeAccountRolesPageAsync(String accountExternalReferenceCode, String externalReferenceCode, final ApiCallback<PageAccountRole> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountByExternalReferenceCodeUserAccountByExternalReferenceCodeAccountRolesPageValidateBeforeCall(accountExternalReferenceCode, externalReferenceCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAccountRole>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountAccountRole
     * @param accountId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountAccountRoleCall(String accountId, AccountRole body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1.0/accounts/{accountId}/account-roles"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountAccountRoleValidateBeforeCall(String accountId, AccountRole body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountAccountRole(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountAccountRoleCall(accountId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Adds a role for the account
     * @param accountId  (required)
     * @param body  (optional)
     * @return AccountRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountRole postAccountAccountRole(String accountId, AccountRole body) throws ApiException {
        ApiResponse<AccountRole> resp = postAccountAccountRoleWithHttpInfo(accountId, body);
        return resp.getData();
    }

    /**
     * 
     * Adds a role for the account
     * @param accountId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AccountRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountRole> postAccountAccountRoleWithHttpInfo(String accountId, AccountRole body) throws ApiException {
        com.squareup.okhttp.Call call = postAccountAccountRoleValidateBeforeCall(accountId, body, null, null);
        Type localVarReturnType = new TypeToken<AccountRole>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a role for the account
     * @param accountId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountAccountRoleAsync(String accountId, AccountRole body, final ApiCallback<AccountRole> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountAccountRoleValidateBeforeCall(accountId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountRole>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountAccountRoleBatch
     * @param accountId  (required)
     * @param body  (optional)
     * @param callbackURL  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountAccountRoleBatchCall(String accountId, Object body, String callbackURL, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1.0/accounts/{accountId}/account-roles/batch"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (callbackURL != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("callbackURL", callbackURL));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountAccountRoleBatchValidateBeforeCall(String accountId, Object body, String callbackURL, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountAccountRoleBatch(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountAccountRoleBatchCall(accountId, body, callbackURL, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param callbackURL  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postAccountAccountRoleBatch(String accountId, Object body, String callbackURL) throws ApiException {
        postAccountAccountRoleBatchWithHttpInfo(accountId, body, callbackURL);
    }

    /**
     * 
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param callbackURL  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postAccountAccountRoleBatchWithHttpInfo(String accountId, Object body, String callbackURL) throws ApiException {
        com.squareup.okhttp.Call call = postAccountAccountRoleBatchValidateBeforeCall(accountId, body, callbackURL, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountId  (required)
     * @param body  (optional)
     * @param callbackURL  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountAccountRoleBatchAsync(String accountId, Object body, String callbackURL, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountAccountRoleBatchValidateBeforeCall(accountId, body, callbackURL, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postAccountAccountRoleByExternalReferenceCode
     * @param externalReferenceCode  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountAccountRoleByExternalReferenceCodeCall(String externalReferenceCode, AccountRole body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1.0/accounts/by-external-reference-code/{externalReferenceCode}/account-roles"
            .replaceAll("\\{" + "externalReferenceCode" + "\\}", apiClient.escapeString(externalReferenceCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountAccountRoleByExternalReferenceCodeValidateBeforeCall(String externalReferenceCode, AccountRole body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'externalReferenceCode' is set
        if (externalReferenceCode == null) {
            throw new ApiException("Missing the required parameter 'externalReferenceCode' when calling postAccountAccountRoleByExternalReferenceCode(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountAccountRoleByExternalReferenceCodeCall(externalReferenceCode, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Adds a role for the account
     * @param externalReferenceCode  (required)
     * @param body  (optional)
     * @return AccountRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountRole postAccountAccountRoleByExternalReferenceCode(String externalReferenceCode, AccountRole body) throws ApiException {
        ApiResponse<AccountRole> resp = postAccountAccountRoleByExternalReferenceCodeWithHttpInfo(externalReferenceCode, body);
        return resp.getData();
    }

    /**
     * 
     * Adds a role for the account
     * @param externalReferenceCode  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;AccountRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountRole> postAccountAccountRoleByExternalReferenceCodeWithHttpInfo(String externalReferenceCode, AccountRole body) throws ApiException {
        com.squareup.okhttp.Call call = postAccountAccountRoleByExternalReferenceCodeValidateBeforeCall(externalReferenceCode, body, null, null);
        Type localVarReturnType = new TypeToken<AccountRole>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a role for the account
     * @param externalReferenceCode  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountAccountRoleByExternalReferenceCodeAsync(String externalReferenceCode, AccountRole body, final ApiCallback<AccountRole> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountAccountRoleByExternalReferenceCodeValidateBeforeCall(externalReferenceCode, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountRole>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postAccountAccountRoleUserAccountAssociation
     * @param accountId  (required)
     * @param accountRoleId  (required)
     * @param userAccountId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountAccountRoleUserAccountAssociationCall(String accountId, String accountRoleId, String userAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/accounts/{accountId}/account-roles/{accountRoleId}/user-accounts/{userAccountId}"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "accountRoleId" + "\\}", apiClient.escapeString(accountRoleId.toString()))
            .replaceAll("\\{" + "userAccountId" + "\\}", apiClient.escapeString(userAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountAccountRoleUserAccountAssociationValidateBeforeCall(String accountId, String accountRoleId, String userAccountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountAccountRoleUserAccountAssociation(Async)");
        }
        // verify the required parameter 'accountRoleId' is set
        if (accountRoleId == null) {
            throw new ApiException("Missing the required parameter 'accountRoleId' when calling postAccountAccountRoleUserAccountAssociation(Async)");
        }
        // verify the required parameter 'userAccountId' is set
        if (userAccountId == null) {
            throw new ApiException("Missing the required parameter 'userAccountId' when calling postAccountAccountRoleUserAccountAssociation(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountAccountRoleUserAccountAssociationCall(accountId, accountRoleId, userAccountId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Assigns account users to the account role
     * @param accountId  (required)
     * @param accountRoleId  (required)
     * @param userAccountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postAccountAccountRoleUserAccountAssociation(String accountId, String accountRoleId, String userAccountId) throws ApiException {
        postAccountAccountRoleUserAccountAssociationWithHttpInfo(accountId, accountRoleId, userAccountId);
    }

    /**
     * 
     * Assigns account users to the account role
     * @param accountId  (required)
     * @param accountRoleId  (required)
     * @param userAccountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postAccountAccountRoleUserAccountAssociationWithHttpInfo(String accountId, String accountRoleId, String userAccountId) throws ApiException {
        com.squareup.okhttp.Call call = postAccountAccountRoleUserAccountAssociationValidateBeforeCall(accountId, accountRoleId, userAccountId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Assigns account users to the account role
     * @param accountId  (required)
     * @param accountRoleId  (required)
     * @param userAccountId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountAccountRoleUserAccountAssociationAsync(String accountId, String accountRoleId, String userAccountId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountAccountRoleUserAccountAssociationValidateBeforeCall(accountId, accountRoleId, userAccountId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postAccountAccountRolesPageExportBatch
     * @param accountId  (required)
     * @param keywords  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param callbackURL  (optional)
     * @param contentType  (optional)
     * @param fieldNames  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountAccountRolesPageExportBatchCall(String accountId, String keywords, String filter, String sort, String callbackURL, String contentType, String fieldNames, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/accounts/{accountId}/account-roles/export-batch"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keywords != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keywords", keywords));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (callbackURL != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("callbackURL", callbackURL));
        if (contentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contentType", contentType));
        if (fieldNames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fieldNames", fieldNames));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountAccountRolesPageExportBatchValidateBeforeCall(String accountId, String keywords, String filter, String sort, String callbackURL, String contentType, String fieldNames, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling postAccountAccountRolesPageExportBatch(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountAccountRolesPageExportBatchCall(accountId, keywords, filter, sort, callbackURL, contentType, fieldNames, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param accountId  (required)
     * @param keywords  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param callbackURL  (optional)
     * @param contentType  (optional)
     * @param fieldNames  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postAccountAccountRolesPageExportBatch(String accountId, String keywords, String filter, String sort, String callbackURL, String contentType, String fieldNames) throws ApiException {
        postAccountAccountRolesPageExportBatchWithHttpInfo(accountId, keywords, filter, sort, callbackURL, contentType, fieldNames);
    }

    /**
     * 
     * 
     * @param accountId  (required)
     * @param keywords  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param callbackURL  (optional)
     * @param contentType  (optional)
     * @param fieldNames  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postAccountAccountRolesPageExportBatchWithHttpInfo(String accountId, String keywords, String filter, String sort, String callbackURL, String contentType, String fieldNames) throws ApiException {
        com.squareup.okhttp.Call call = postAccountAccountRolesPageExportBatchValidateBeforeCall(accountId, keywords, filter, sort, callbackURL, contentType, fieldNames, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param accountId  (required)
     * @param keywords  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param callbackURL  (optional)
     * @param contentType  (optional)
     * @param fieldNames  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountAccountRolesPageExportBatchAsync(String accountId, String keywords, String filter, String sort, String callbackURL, String contentType, String fieldNames, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountAccountRolesPageExportBatchValidateBeforeCall(accountId, keywords, filter, sort, callbackURL, contentType, fieldNames, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddress
     * @param externalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param emailAddress  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressCall(String externalReferenceCode, String accountRoleId, String emailAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/accounts/by-external-reference-code/{externalReferenceCode}/account-roles/{accountRoleId}/user-accounts/by-email-address/{emailAddress}"
            .replaceAll("\\{" + "externalReferenceCode" + "\\}", apiClient.escapeString(externalReferenceCode.toString()))
            .replaceAll("\\{" + "accountRoleId" + "\\}", apiClient.escapeString(accountRoleId.toString()))
            .replaceAll("\\{" + "emailAddress" + "\\}", apiClient.escapeString(emailAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressValidateBeforeCall(String externalReferenceCode, String accountRoleId, String emailAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'externalReferenceCode' is set
        if (externalReferenceCode == null) {
            throw new ApiException("Missing the required parameter 'externalReferenceCode' when calling postAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddress(Async)");
        }
        // verify the required parameter 'accountRoleId' is set
        if (accountRoleId == null) {
            throw new ApiException("Missing the required parameter 'accountRoleId' when calling postAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddress(Async)");
        }
        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException("Missing the required parameter 'emailAddress' when calling postAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddress(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressCall(externalReferenceCode, accountRoleId, emailAddress, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Assigns account users by email address to the account role
     * @param externalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param emailAddress  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddress(String externalReferenceCode, String accountRoleId, String emailAddress) throws ApiException {
        postAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressWithHttpInfo(externalReferenceCode, accountRoleId, emailAddress);
    }

    /**
     * 
     * Assigns account users by email address to the account role
     * @param externalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param emailAddress  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressWithHttpInfo(String externalReferenceCode, String accountRoleId, String emailAddress) throws ApiException {
        com.squareup.okhttp.Call call = postAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressValidateBeforeCall(externalReferenceCode, accountRoleId, emailAddress, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Assigns account users by email address to the account role
     * @param externalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param emailAddress  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressAsync(String externalReferenceCode, String accountRoleId, String emailAddress, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountByExternalReferenceCodeAccountRoleUserAccountByEmailAddressValidateBeforeCall(externalReferenceCode, accountRoleId, emailAddress, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCode
     * @param accountExternalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param externalReferenceCode  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeCall(String accountExternalReferenceCode, String accountRoleId, String externalReferenceCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1.0/accounts/by-external-reference-code/{accountExternalReferenceCode}/account-roles/{accountRoleId}/user-accounts/by-external-reference-code/{externalReferenceCode}"
            .replaceAll("\\{" + "accountExternalReferenceCode" + "\\}", apiClient.escapeString(accountExternalReferenceCode.toString()))
            .replaceAll("\\{" + "accountRoleId" + "\\}", apiClient.escapeString(accountRoleId.toString()))
            .replaceAll("\\{" + "externalReferenceCode" + "\\}", apiClient.escapeString(externalReferenceCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeValidateBeforeCall(String accountExternalReferenceCode, String accountRoleId, String externalReferenceCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accountExternalReferenceCode' is set
        if (accountExternalReferenceCode == null) {
            throw new ApiException("Missing the required parameter 'accountExternalReferenceCode' when calling postAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCode(Async)");
        }
        // verify the required parameter 'accountRoleId' is set
        if (accountRoleId == null) {
            throw new ApiException("Missing the required parameter 'accountRoleId' when calling postAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCode(Async)");
        }
        // verify the required parameter 'externalReferenceCode' is set
        if (externalReferenceCode == null) {
            throw new ApiException("Missing the required parameter 'externalReferenceCode' when calling postAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCode(Async)");
        }
        
        com.squareup.okhttp.Call call = postAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeCall(accountExternalReferenceCode, accountRoleId, externalReferenceCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Assigns account users by external reference code to the account role
     * @param accountExternalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param externalReferenceCode  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCode(String accountExternalReferenceCode, String accountRoleId, String externalReferenceCode) throws ApiException {
        postAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeWithHttpInfo(accountExternalReferenceCode, accountRoleId, externalReferenceCode);
    }

    /**
     * 
     * Assigns account users by external reference code to the account role
     * @param accountExternalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param externalReferenceCode  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeWithHttpInfo(String accountExternalReferenceCode, String accountRoleId, String externalReferenceCode) throws ApiException {
        com.squareup.okhttp.Call call = postAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeValidateBeforeCall(accountExternalReferenceCode, accountRoleId, externalReferenceCode, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Assigns account users by external reference code to the account role
     * @param accountExternalReferenceCode  (required)
     * @param accountRoleId  (required)
     * @param externalReferenceCode  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeAsync(String accountExternalReferenceCode, String accountRoleId, String externalReferenceCode, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAccountByExternalReferenceCodeAccountRoleUserAccountByExternalReferenceCodeValidateBeforeCall(accountExternalReferenceCode, accountRoleId, externalReferenceCode, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
