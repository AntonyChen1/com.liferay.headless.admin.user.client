/*
 * Headless Admin User
 * A Java client JAR is available for use with the group ID 'com.liferay', artifact ID 'com.liferay.headless.admin.user.client', and version '4.0.49'.
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.liferay.headless.admin.user.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.liferay.headless.admin.user.client.model.AccountBrief;
import com.liferay.headless.admin.user.client.model.CustomField;
import com.liferay.headless.admin.user.client.model.OrganizationBrief;
import com.liferay.headless.admin.user.client.model.RoleBrief;
import com.liferay.headless.admin.user.client.model.SiteBrief;
import com.liferay.headless.admin.user.client.model.UserAccountContactInformation;
import com.liferay.headless.admin.user.client.model.UserGroupBrief;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
/**
 * UserAccount
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-04T10:04:24.474623+08:00[Asia/Shanghai]")

public class UserAccount {
  @SerializedName("accountBriefs")
  private List<AccountBrief> accountBriefs = null;

  @SerializedName("actions")
  private Map<String, Map<String, String>> actions = null;

  @SerializedName("additionalName")
  private String additionalName = null;

  @SerializedName("alternateName")
  private String alternateName = null;

  @SerializedName("birthDate")
  private OffsetDateTime birthDate = null;

  @SerializedName("currentPassword")
  private String currentPassword = null;

  @SerializedName("customFields")
  private List<CustomField> customFields = null;

  @SerializedName("dashboardURL")
  private String dashboardURL = null;

  @SerializedName("dateCreated")
  private OffsetDateTime dateCreated = null;

  @SerializedName("dateModified")
  private OffsetDateTime dateModified = null;

  @SerializedName("emailAddress")
  private String emailAddress = null;

  @SerializedName("externalReferenceCode")
  private String externalReferenceCode = null;

  @SerializedName("familyName")
  private String familyName = null;

  @SerializedName("givenName")
  private String givenName = null;

  @SerializedName("honorificPrefix")
  private String honorificPrefix = null;

  @SerializedName("honorificSuffix")
  private String honorificSuffix = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("image")
  private String image = null;

  @SerializedName("jobTitle")
  private String jobTitle = null;

  @SerializedName("keywords")
  private List<String> keywords = null;

  @SerializedName("lastLoginDate")
  private OffsetDateTime lastLoginDate = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("organizationBriefs")
  private List<OrganizationBrief> organizationBriefs = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("profileURL")
  private String profileURL = null;

  @SerializedName("roleBriefs")
  private List<RoleBrief> roleBriefs = null;

  @SerializedName("siteBriefs")
  private List<SiteBrief> siteBriefs = null;

  /**
   * The user&#x27;s status.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("Active")
    ACTIVE("Active"),
    @SerializedName("Inactive")
    INACTIVE("Inactive");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("userAccountContactInformation")
  private UserAccountContactInformation userAccountContactInformation = null;

  @SerializedName("userGroupBriefs")
  private List<UserGroupBrief> userGroupBriefs = null;

  @SerializedName("x-class-name")
  private String xClassName = "com.liferay.headless.admin.user.dto.v1_0.UserAccount";

   /**
   * A list of the user&#x27;s account.
   * @return accountBriefs
  **/
  @Schema(description = "A list of the user's account.")
  public List<AccountBrief> getAccountBriefs() {
    return accountBriefs;
  }

   /**
   * Get actions
   * @return actions
  **/
  @Schema(description = "")
  public Map<String, Map<String, String>> getActions() {
    return actions;
  }

  public UserAccount additionalName(String additionalName) {
    this.additionalName = additionalName;
    return this;
  }

   /**
   * The user&#x27;s additional name (e.g., middle name).
   * @return additionalName
  **/
  @Schema(description = "The user's additional name (e.g., middle name).")
  public String getAdditionalName() {
    return additionalName;
  }

  public void setAdditionalName(String additionalName) {
    this.additionalName = additionalName;
  }

  public UserAccount alternateName(String alternateName) {
    this.alternateName = alternateName;
    return this;
  }

   /**
   * The user&#x27;s alias or screen name.
   * @return alternateName
  **/
  @Schema(description = "The user's alias or screen name.")
  public String getAlternateName() {
    return alternateName;
  }

  public void setAlternateName(String alternateName) {
    this.alternateName = alternateName;
  }

  public UserAccount birthDate(OffsetDateTime birthDate) {
    this.birthDate = birthDate;
    return this;
  }

   /**
   * The user&#x27;s date of birth, in ISO 8601 format.
   * @return birthDate
  **/
  @Schema(description = "The user's date of birth, in ISO 8601 format.")
  public OffsetDateTime getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(OffsetDateTime birthDate) {
    this.birthDate = birthDate;
  }

  public UserAccount currentPassword(String currentPassword) {
    this.currentPassword = currentPassword;
    return this;
  }

   /**
   * Get currentPassword
   * @return currentPassword
  **/
  @Schema(description = "")
  public String getCurrentPassword() {
    return currentPassword;
  }

  public void setCurrentPassword(String currentPassword) {
    this.currentPassword = currentPassword;
  }

  public UserAccount customFields(List<CustomField> customFields) {
    this.customFields = customFields;
    return this;
  }

  public UserAccount addCustomFieldsItem(CustomField customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<CustomField>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @Schema(description = "")
  public List<CustomField> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(List<CustomField> customFields) {
    this.customFields = customFields;
  }

   /**
   * A relative URL to the user&#x27;s dashboard.
   * @return dashboardURL
  **/
  @Schema(description = "A relative URL to the user's dashboard.")
  public String getDashboardURL() {
    return dashboardURL;
  }

   /**
   * The creation date of the user&#x27;s account.
   * @return dateCreated
  **/
  @Schema(description = "The creation date of the user's account.")
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

   /**
   * The last time any field of the user&#x27;s account was changed.
   * @return dateModified
  **/
  @Schema(description = "The last time any field of the user's account was changed.")
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public UserAccount emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * The user&#x27;s main email address.
   * @return emailAddress
  **/
  @Schema(description = "The user's main email address.")
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }

   /**
   * The optional external key of this user account.
   * @return externalReferenceCode
  **/
  @Schema(description = "The optional external key of this user account.")
  public String getExternalReferenceCode() {
    return externalReferenceCode;
  }

  public UserAccount familyName(String familyName) {
    this.familyName = familyName;
    return this;
  }

   /**
   * The user&#x27;s surname (last name).
   * @return familyName
  **/
  @Schema(description = "The user's surname (last name).")
  public String getFamilyName() {
    return familyName;
  }

  public void setFamilyName(String familyName) {
    this.familyName = familyName;
  }

  public UserAccount givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

   /**
   * The user&#x27;s first name.
   * @return givenName
  **/
  @Schema(description = "The user's first name.")
  public String getGivenName() {
    return givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }

  public UserAccount honorificPrefix(String honorificPrefix) {
    this.honorificPrefix = honorificPrefix;
    return this;
  }

   /**
   * The user&#x27;s title (e.g., Dr., Mr., Mrs, Ms., etc.).
   * @return honorificPrefix
  **/
  @Schema(description = "The user's title (e.g., Dr., Mr., Mrs, Ms., etc.).")
  public String getHonorificPrefix() {
    return honorificPrefix;
  }

  public void setHonorificPrefix(String honorificPrefix) {
    this.honorificPrefix = honorificPrefix;
  }

  public UserAccount honorificSuffix(String honorificSuffix) {
    this.honorificSuffix = honorificSuffix;
    return this;
  }

   /**
   * The user&#x27;s suffix (e.g., II, Jr., PhD, etc.).
   * @return honorificSuffix
  **/
  @Schema(description = "The user's suffix (e.g., II, Jr., PhD, etc.).")
  public String getHonorificSuffix() {
    return honorificSuffix;
  }

  public void setHonorificSuffix(String honorificSuffix) {
    this.honorificSuffix = honorificSuffix;
  }

  public UserAccount id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * The user&#x27;s ID.
   * @return id
  **/
  @Schema(description = "The user's ID.")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

   /**
   * A relative URL to the user&#x27;s profile image.
   * @return image
  **/
  @Schema(description = "A relative URL to the user's profile image.")
  public String getImage() {
    return image;
  }

  public UserAccount jobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * The user&#x27;s job title.
   * @return jobTitle
  **/
  @Schema(description = "The user's job title.")
  public String getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
  }

   /**
   * A list of keywords describing the user.
   * @return keywords
  **/
  @Schema(description = "A list of keywords describing the user.")
  public List<String> getKeywords() {
    return keywords;
  }

   /**
   * The last time the user logged in.
   * @return lastLoginDate
  **/
  @Schema(description = "The last time the user logged in.")
  public OffsetDateTime getLastLoginDate() {
    return lastLoginDate;
  }

   /**
   * The user&#x27;s full name.
   * @return name
  **/
  @Schema(description = "The user's full name.")
  public String getName() {
    return name;
  }

   /**
   * A list of the user&#x27;s organizations.
   * @return organizationBriefs
  **/
  @Schema(description = "A list of the user's organizations.")
  public List<OrganizationBrief> getOrganizationBriefs() {
    return organizationBriefs;
  }

  public UserAccount password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @Schema(description = "")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

   /**
   * A relative URL to the user&#x27;s profile.
   * @return profileURL
  **/
  @Schema(description = "A relative URL to the user's profile.")
  public String getProfileURL() {
    return profileURL;
  }

   /**
   * A list of the user&#x27;s roles.
   * @return roleBriefs
  **/
  @Schema(description = "A list of the user's roles.")
  public List<RoleBrief> getRoleBriefs() {
    return roleBriefs;
  }

   /**
   * A list of the user&#x27;s sites.
   * @return siteBriefs
  **/
  @Schema(description = "A list of the user's sites.")
  public List<SiteBrief> getSiteBriefs() {
    return siteBriefs;
  }

  public UserAccount status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The user&#x27;s status.
   * @return status
  **/
  @Schema(description = "The user's status.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public UserAccount userAccountContactInformation(UserAccountContactInformation userAccountContactInformation) {
    this.userAccountContactInformation = userAccountContactInformation;
    return this;
  }

   /**
   * Get userAccountContactInformation
   * @return userAccountContactInformation
  **/
  @Schema(description = "")
  public UserAccountContactInformation getUserAccountContactInformation() {
    return userAccountContactInformation;
  }

  public void setUserAccountContactInformation(UserAccountContactInformation userAccountContactInformation) {
    this.userAccountContactInformation = userAccountContactInformation;
  }

   /**
   * A list of the user&#x27;s userGroups.
   * @return userGroupBriefs
  **/
  @Schema(description = "A list of the user's userGroups.")
  public List<UserGroupBrief> getUserGroupBriefs() {
    return userGroupBriefs;
  }

   /**
   * Get xClassName
   * @return xClassName
  **/
  @Schema(description = "")
  public String getXClassName() {
    return xClassName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAccount userAccount = (UserAccount) o;
    return Objects.equals(this.accountBriefs, userAccount.accountBriefs) &&
        Objects.equals(this.actions, userAccount.actions) &&
        Objects.equals(this.additionalName, userAccount.additionalName) &&
        Objects.equals(this.alternateName, userAccount.alternateName) &&
        Objects.equals(this.birthDate, userAccount.birthDate) &&
        Objects.equals(this.currentPassword, userAccount.currentPassword) &&
        Objects.equals(this.customFields, userAccount.customFields) &&
        Objects.equals(this.dashboardURL, userAccount.dashboardURL) &&
        Objects.equals(this.dateCreated, userAccount.dateCreated) &&
        Objects.equals(this.dateModified, userAccount.dateModified) &&
        Objects.equals(this.emailAddress, userAccount.emailAddress) &&
        Objects.equals(this.externalReferenceCode, userAccount.externalReferenceCode) &&
        Objects.equals(this.familyName, userAccount.familyName) &&
        Objects.equals(this.givenName, userAccount.givenName) &&
        Objects.equals(this.honorificPrefix, userAccount.honorificPrefix) &&
        Objects.equals(this.honorificSuffix, userAccount.honorificSuffix) &&
        Objects.equals(this.id, userAccount.id) &&
        Objects.equals(this.image, userAccount.image) &&
        Objects.equals(this.jobTitle, userAccount.jobTitle) &&
        Objects.equals(this.keywords, userAccount.keywords) &&
        Objects.equals(this.lastLoginDate, userAccount.lastLoginDate) &&
        Objects.equals(this.name, userAccount.name) &&
        Objects.equals(this.organizationBriefs, userAccount.organizationBriefs) &&
        Objects.equals(this.password, userAccount.password) &&
        Objects.equals(this.profileURL, userAccount.profileURL) &&
        Objects.equals(this.roleBriefs, userAccount.roleBriefs) &&
        Objects.equals(this.siteBriefs, userAccount.siteBriefs) &&
        Objects.equals(this.status, userAccount.status) &&
        Objects.equals(this.userAccountContactInformation, userAccount.userAccountContactInformation) &&
        Objects.equals(this.userGroupBriefs, userAccount.userGroupBriefs) &&
        Objects.equals(this.xClassName, userAccount.xClassName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountBriefs, actions, additionalName, alternateName, birthDate, currentPassword, customFields, dashboardURL, dateCreated, dateModified, emailAddress, externalReferenceCode, familyName, givenName, honorificPrefix, honorificSuffix, id, image, jobTitle, keywords, lastLoginDate, name, organizationBriefs, password, profileURL, roleBriefs, siteBriefs, status, userAccountContactInformation, userGroupBriefs, xClassName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAccount {\n");
    
    sb.append("    accountBriefs: ").append(toIndentedString(accountBriefs)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    additionalName: ").append(toIndentedString(additionalName)).append("\n");
    sb.append("    alternateName: ").append(toIndentedString(alternateName)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    currentPassword: ").append(toIndentedString(currentPassword)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    dashboardURL: ").append(toIndentedString(dashboardURL)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    externalReferenceCode: ").append(toIndentedString(externalReferenceCode)).append("\n");
    sb.append("    familyName: ").append(toIndentedString(familyName)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    honorificPrefix: ").append(toIndentedString(honorificPrefix)).append("\n");
    sb.append("    honorificSuffix: ").append(toIndentedString(honorificSuffix)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    lastLoginDate: ").append(toIndentedString(lastLoginDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organizationBriefs: ").append(toIndentedString(organizationBriefs)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    profileURL: ").append(toIndentedString(profileURL)).append("\n");
    sb.append("    roleBriefs: ").append(toIndentedString(roleBriefs)).append("\n");
    sb.append("    siteBriefs: ").append(toIndentedString(siteBriefs)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    userAccountContactInformation: ").append(toIndentedString(userAccountContactInformation)).append("\n");
    sb.append("    userGroupBriefs: ").append(toIndentedString(userGroupBriefs)).append("\n");
    sb.append("    xClassName: ").append(toIndentedString(xClassName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
