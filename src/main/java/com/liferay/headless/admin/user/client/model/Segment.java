/*
 * Headless Admin User
 * A Java client JAR is available for use with the group ID 'com.liferay', artifact ID 'com.liferay.headless.admin.user.client', and version '4.0.49'.
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.liferay.headless.admin.user.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
/**
 * Represents a set of users that meet certain criteria. Segments may be used to create customized experiences for users.
 */
@Schema(description = "Represents a set of users that meet certain criteria. Segments may be used to create customized experiences for users.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-03-04T10:04:24.474623+08:00[Asia/Shanghai]")

public class Segment {
  @SerializedName("active")
  private Boolean active = null;

  @SerializedName("criteria")
  private String criteria = null;

  @SerializedName("criteriaValue")
  private Map<String, Object> criteriaValue = null;

  @SerializedName("dateCreated")
  private OffsetDateTime dateCreated = null;

  @SerializedName("dateModified")
  private OffsetDateTime dateModified = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("siteId")
  private Long siteId = null;

  @SerializedName("source")
  private String source = null;

  @SerializedName("x-class-name")
  private String xClassName = "com.liferay.headless.admin.user.dto.v1_0.Segment";

   /**
   * A flag that indicates whether the segment is active.
   * @return active
  **/
  @Schema(description = "A flag that indicates whether the segment is active.")
  public Boolean isActive() {
    return active;
  }

   /**
   * The segment&#x27;s criteria.
   * @return criteria
  **/
  @Schema(required = true, description = "The segment's criteria.")
  public String getCriteria() {
    return criteria;
  }

   /**
   * The segment&#x27;s criteria in JSON.
   * @return criteriaValue
  **/
  @Schema(description = "The segment's criteria in JSON.")
  public Map<String, Object> getCriteriaValue() {
    return criteriaValue;
  }

   /**
   * The segment&#x27;s creation date.
   * @return dateCreated
  **/
  @Schema(description = "The segment's creation date.")
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

   /**
   * The segment&#x27;s most recent modification date.
   * @return dateModified
  **/
  @Schema(description = "The segment's most recent modification date.")
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

   /**
   * The segment&#x27;s ID.
   * @return id
  **/
  @Schema(description = "The segment's ID.")
  public Long getId() {
    return id;
  }

   /**
   * The segment&#x27;s name.
   * @return name
  **/
  @Schema(required = true, description = "The segment's name.")
  public String getName() {
    return name;
  }

   /**
   * The ID of the segment&#x27;s site.
   * @return siteId
  **/
  @Schema(description = "The ID of the segment's site.")
  public Long getSiteId() {
    return siteId;
  }

   /**
   * The segment&#x27;s source.
   * @return source
  **/
  @Schema(description = "The segment's source.")
  public String getSource() {
    return source;
  }

   /**
   * Get xClassName
   * @return xClassName
  **/
  @Schema(description = "")
  public String getXClassName() {
    return xClassName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Segment segment = (Segment) o;
    return Objects.equals(this.active, segment.active) &&
        Objects.equals(this.criteria, segment.criteria) &&
        Objects.equals(this.criteriaValue, segment.criteriaValue) &&
        Objects.equals(this.dateCreated, segment.dateCreated) &&
        Objects.equals(this.dateModified, segment.dateModified) &&
        Objects.equals(this.id, segment.id) &&
        Objects.equals(this.name, segment.name) &&
        Objects.equals(this.siteId, segment.siteId) &&
        Objects.equals(this.source, segment.source) &&
        Objects.equals(this.xClassName, segment.xClassName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, criteria, criteriaValue, dateCreated, dateModified, id, name, siteId, source, xClassName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Segment {\n");
    
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("    criteriaValue: ").append(toIndentedString(criteriaValue)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    xClassName: ").append(toIndentedString(xClassName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
