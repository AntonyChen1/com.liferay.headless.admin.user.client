/*
 * Headless Admin User
 * A Java client JAR is available for use with the group ID 'com.liferay', artifact ID 'com.liferay.headless.admin.user.client', and version '4.0.49'.
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.liferay.headless.admin.user.client.api;

import com.liferay.headless.admin.user.client.model.Account;
import com.liferay.headless.admin.user.client.model.PageAccount;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for AccountApi
 */
@Ignore
public class AccountApiTest {

    private final AccountApi api = new AccountApi();

    /**
     * 
     *
     * Deletes an account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws Exception {
        String accountId = null;
        api.deleteAccount(accountId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteAccountBatchTest() throws Exception {
        Object body = null;
        String callbackURL = null;
        api.deleteAccountBatch(body, callbackURL);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes an account.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteAccountByExternalReferenceCodeTest() throws Exception {
        String externalReferenceCode = null;
        api.deleteAccountByExternalReferenceCode(externalReferenceCode);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteOrganizationAccountsTest() throws Exception {
        String organizationId = null;
        List<Long> body = null;
        api.deleteOrganizationAccounts(organizationId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteOrganizationAccountsByExternalReferenceCodeTest() throws Exception {
        String organizationId = null;
        List<String> body = null;
        api.deleteOrganizationAccountsByExternalReferenceCode(organizationId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccountTest() throws Exception {
        String accountId = null;
        Account response = api.getAccount(accountId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccountByExternalReferenceCodeTest() throws Exception {
        String externalReferenceCode = null;
        Account response = api.getAccountByExternalReferenceCode(externalReferenceCode);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the accounts. Results can be paginated, filtered, searched, and sorted.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccountsPageTest() throws Exception {
        String filter = null;
        String page = null;
        String pageSize = null;
        String search = null;
        String sort = null;
        PageAccount response = api.getAccountsPage(filter, page, pageSize, search, sort);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the organization&#x27;s members (accounts). Results can be paginated, filtered, searched, and sorted.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOrganizationAccountsPageTest() throws Exception {
        String organizationId = null;
        String filter = null;
        String page = null;
        String pageSize = null;
        String search = null;
        String sort = null;
        PageAccount response = api.getOrganizationAccountsPage(organizationId, filter, page, pageSize, search, sort);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the account with information sent in the request body. Only the provided fields are updated.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void patchAccountTest() throws Exception {
        String accountId = null;
        Account body = null;
        Account response = api.patchAccount(accountId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the account with information sent in the request body. Only the provided fields are updated.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void patchAccountByExternalReferenceCodeTest() throws Exception {
        String externalReferenceCode = null;
        Account body = null;
        Account response = api.patchAccountByExternalReferenceCode(externalReferenceCode, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void patchOrganizationMoveAccountsTest() throws Exception {
        String sourceOrganizationId = null;
        String targetOrganizationId = null;
        List<Long> body = null;
        api.patchOrganizationMoveAccounts(sourceOrganizationId, targetOrganizationId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void patchOrganizationMoveAccountsByExternalReferenceCodeTest() throws Exception {
        String sourceOrganizationId = null;
        String targetOrganizationId = null;
        List<String> body = null;
        api.patchOrganizationMoveAccountsByExternalReferenceCode(sourceOrganizationId, targetOrganizationId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new account
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postAccountTest() throws Exception {
        Account body = null;
        Account response = api.postAccount(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postAccountBatchTest() throws Exception {
        Object body = null;
        String callbackURL = null;
        api.postAccountBatch(body, callbackURL);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postAccountsPageExportBatchTest() throws Exception {
        String filter = null;
        String search = null;
        String sort = null;
        String callbackURL = null;
        String contentType = null;
        String fieldNames = null;
        api.postAccountsPageExportBatch(filter, search, sort, callbackURL, contentType, fieldNames);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postOrganizationAccountsTest() throws Exception {
        String organizationId = null;
        List<Long> body = null;
        api.postOrganizationAccounts(organizationId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postOrganizationAccountsByExternalReferenceCodeTest() throws Exception {
        String organizationId = null;
        List<String> body = null;
        api.postOrganizationAccountsByExternalReferenceCode(organizationId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postOrganizationAccountsPageExportBatchTest() throws Exception {
        String organizationId = null;
        String filter = null;
        String search = null;
        String sort = null;
        String callbackURL = null;
        String contentType = null;
        String fieldNames = null;
        api.postOrganizationAccountsPageExportBatch(organizationId, filter, search, sort, callbackURL, contentType, fieldNames);

        // TODO: test validations
    }
    /**
     * 
     *
     * Replaces the account with information sent in the request body. Any missing fields are deleted unless they are required.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putAccountTest() throws Exception {
        String accountId = null;
        Account body = null;
        Account response = api.putAccount(accountId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putAccountBatchTest() throws Exception {
        Object body = null;
        String callbackURL = null;
        api.putAccountBatch(body, callbackURL);

        // TODO: test validations
    }
    /**
     * 
     *
     * Replaces the account with information sent in the request body. Any missing fields are deleted unless they are required.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putAccountByExternalReferenceCodeTest() throws Exception {
        String externalReferenceCode = null;
        Account body = null;
        Account response = api.putAccountByExternalReferenceCode(externalReferenceCode, body);

        // TODO: test validations
    }
}
