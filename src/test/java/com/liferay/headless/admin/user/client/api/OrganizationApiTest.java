/*
 * Headless Admin User
 * A Java client JAR is available for use with the group ID 'com.liferay', artifact ID 'com.liferay.headless.admin.user.client', and version '4.0.49'.
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.liferay.headless.admin.user.client.api;

import com.liferay.headless.admin.user.client.model.Organization;
import com.liferay.headless.admin.user.client.model.PageOrganization;
import com.liferay.headless.admin.user.client.model.PageUserAccount;
import com.liferay.headless.admin.user.client.model.UserAccount;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for OrganizationApi
 */
@Ignore
public class OrganizationApiTest {

    private final OrganizationApi api = new OrganizationApi();

    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteAccountByExternalReferenceCodeOrganizationTest() throws Exception {
        String externalReferenceCode = null;
        String organizationId = null;
        api.deleteAccountByExternalReferenceCodeOrganization(externalReferenceCode, organizationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteAccountOrganizationTest() throws Exception {
        String accountId = null;
        String organizationId = null;
        api.deleteAccountOrganization(accountId, organizationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteOrganizationTest() throws Exception {
        String organizationId = null;
        api.deleteOrganization(organizationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteOrganizationBatchTest() throws Exception {
        Object body = null;
        String callbackURL = null;
        api.deleteOrganizationBatch(body, callbackURL);

        // TODO: test validations
    }
    /**
     * 
     *
     * Deletes an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteOrganizationByExternalReferenceCodeTest() throws Exception {
        String externalReferenceCode = null;
        api.deleteOrganizationByExternalReferenceCode(externalReferenceCode);

        // TODO: test validations
    }
    /**
     * 
     *
     * Removes a user from an organization by their email address
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteUserAccountByEmailAddressTest() throws Exception {
        String organizationId = null;
        String emailAddress = null;
        api.deleteUserAccountByEmailAddress(organizationId, emailAddress);

        // TODO: test validations
    }
    /**
     * 
     *
     * Removes users from an organization by their email addresses
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteUserAccountsByEmailAddressTest() throws Exception {
        String organizationId = null;
        List<String> body = null;
        api.deleteUserAccountsByEmailAddress(organizationId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccountByExternalReferenceCodeOrganizationTest() throws Exception {
        String externalReferenceCode = null;
        String organizationId = null;
        Organization response = api.getAccountByExternalReferenceCodeOrganization(externalReferenceCode, organizationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the account&#x27;s organizations. Results can be paginated, filtered, searched, and sorted.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccountByExternalReferenceCodeOrganizationsPageTest() throws Exception {
        String externalReferenceCode = null;
        String filter = null;
        String page = null;
        String pageSize = null;
        String search = null;
        String sort = null;
        PageOrganization response = api.getAccountByExternalReferenceCodeOrganizationsPage(externalReferenceCode, filter, page, pageSize, search, sort);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccountOrganizationTest() throws Exception {
        String accountId = null;
        String organizationId = null;
        Organization response = api.getAccountOrganization(accountId, organizationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the account&#x27;s organizations. Results can be paginated, filtered, searched, and sorted.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccountOrganizationsPageTest() throws Exception {
        String accountId = null;
        String filter = null;
        String page = null;
        String pageSize = null;
        String search = null;
        String sort = null;
        PageOrganization response = api.getAccountOrganizationsPage(accountId, filter, page, pageSize, search, sort);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOrganizationTest() throws Exception {
        String organizationId = null;
        Organization response = api.getOrganization(organizationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOrganizationByExternalReferenceCodeTest() throws Exception {
        String externalReferenceCode = null;
        Organization response = api.getOrganizationByExternalReferenceCode(externalReferenceCode);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the parent organization&#x27;s child organizations. Results can be paginated, filtered, searched, and sorted.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOrganizationChildOrganizationsPageTest() throws Exception {
        String organizationId = null;
        String flatten = null;
        String filter = null;
        String page = null;
        String pageSize = null;
        String search = null;
        String sort = null;
        PageOrganization response = api.getOrganizationChildOrganizationsPage(organizationId, flatten, filter, page, pageSize, search, sort);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the parent organization&#x27;s child organizations. Results can be paginated, filtered, searched, and sorted.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOrganizationOrganizationsPageTest() throws Exception {
        String parentOrganizationId = null;
        String flatten = null;
        String filter = null;
        String page = null;
        String pageSize = null;
        String search = null;
        String sort = null;
        PageOrganization response = api.getOrganizationOrganizationsPage(parentOrganizationId, flatten, filter, page, pageSize, search, sort);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieves the organizations. Results can be paginated, filtered, searched, and sorted.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOrganizationsPageTest() throws Exception {
        String flatten = null;
        String filter = null;
        String page = null;
        String pageSize = null;
        String search = null;
        String sort = null;
        PageOrganization response = api.getOrganizationsPage(flatten, filter, page, pageSize, search, sort);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the organization with the information sent in the request body. Fields not present in the request body are left unchanged.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void patchOrganizationTest() throws Exception {
        String organizationId = null;
        Organization body = null;
        Organization response = api.patchOrganization(organizationId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * Updates the organization with information sent in the request body. Only the provided fields are updated.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void patchOrganizationByExternalReferenceCodeTest() throws Exception {
        String externalReferenceCode = null;
        Organization body = null;
        Organization response = api.patchOrganizationByExternalReferenceCode(externalReferenceCode, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postAccountByExternalReferenceCodeOrganizationTest() throws Exception {
        String externalReferenceCode = null;
        String organizationId = null;
        api.postAccountByExternalReferenceCodeOrganization(externalReferenceCode, organizationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postAccountOrganizationTest() throws Exception {
        String accountId = null;
        String organizationId = null;
        api.postAccountOrganization(accountId, organizationId);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postAccountOrganizationsPageExportBatchTest() throws Exception {
        String accountId = null;
        String filter = null;
        String search = null;
        String sort = null;
        String callbackURL = null;
        String contentType = null;
        String fieldNames = null;
        api.postAccountOrganizationsPageExportBatch(accountId, filter, search, sort, callbackURL, contentType, fieldNames);

        // TODO: test validations
    }
    /**
     * 
     *
     * Creates a new organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postOrganizationTest() throws Exception {
        Organization body = null;
        Organization response = api.postOrganization(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postOrganizationBatchTest() throws Exception {
        Object body = null;
        String callbackURL = null;
        api.postOrganizationBatch(body, callbackURL);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postOrganizationsPageExportBatchTest() throws Exception {
        String filter = null;
        String search = null;
        String sort = null;
        String callbackURL = null;
        String contentType = null;
        String fieldNames = null;
        api.postOrganizationsPageExportBatch(filter, search, sort, callbackURL, contentType, fieldNames);

        // TODO: test validations
    }
    /**
     * 
     *
     * Assigns a user to an organization by their email address
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postUserAccountByEmailAddressTest() throws Exception {
        String organizationId = null;
        String emailAddress = null;
        UserAccount response = api.postUserAccountByEmailAddress(organizationId, emailAddress);

        // TODO: test validations
    }
    /**
     * 
     *
     * Assigns users to an organization by their email addresses
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postUserAccountsByEmailAddressTest() throws Exception {
        String organizationId = null;
        List<String> body = null;
        String organizationRoleIds = null;
        PageUserAccount response = api.postUserAccountsByEmailAddress(organizationId, body, organizationRoleIds);

        // TODO: test validations
    }
    /**
     * 
     *
     * Replaces the organization with information sent in the request body. Any missing fields are deleted unless they are required.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putOrganizationTest() throws Exception {
        String organizationId = null;
        Organization body = null;
        Organization response = api.putOrganization(organizationId, body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putOrganizationBatchTest() throws Exception {
        Object body = null;
        String callbackURL = null;
        api.putOrganizationBatch(body, callbackURL);

        // TODO: test validations
    }
    /**
     * 
     *
     * Replaces the organization with information sent in the request body. Any missing fields are deleted unless they are required.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putOrganizationByExternalReferenceCodeTest() throws Exception {
        String externalReferenceCode = null;
        Organization body = null;
        Organization response = api.putOrganizationByExternalReferenceCode(externalReferenceCode, body);

        // TODO: test validations
    }
}
